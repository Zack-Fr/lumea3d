/* tslint:disable */
/* eslint-disable */
/**
 * Lumea API
 * # Lumea Interior Layout Generator API  Advanced AI-powered interior layout generator with explainable spatial reasoning.  ## Features - **3D Scene Management**: Create and manage complex 3D interior layouts - **Asset Processing Pipeline**: Automatic optimization with KTX2, Draco, and Meshopt variants - **Real-time Collaboration**: Server-Sent Events for live scene updates - **Optimistic Locking**: If-Match headers for safe concurrent editing - **Category-based Organization**: Enhanced scene manifests with filtering capabilities - **Processing Queue**: Background asset processing with status tracking  ## Authentication All endpoints require Bearer token authentication unless explicitly marked as public.  ## Rate Limiting - General API: 100 requests per 15 minutes per IP - Authentication: 5 attempts per 15 minutes per IP  ## Versioning Scene operations support optimistic locking via If-Match headers for safe concurrent editing.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lumea.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



/**
 * 
 * @export
 * @interface CreateSceneDto
 */
export interface CreateSceneDto {
    /**
     * Name of the 3D scene
     * @type {string}
     * @memberof CreateSceneDto
     */
    'name': string;
    /**
     * Scene scale factor
     * @type {number}
     * @memberof CreateSceneDto
     */
    'scale'?: number;
    /**
     * Scene exposure level
     * @type {number}
     * @memberof CreateSceneDto
     */
    'exposure'?: number;
    /**
     * Environment HDRI texture URL
     * @type {string}
     * @memberof CreateSceneDto
     */
    'envHdriUrl'?: string;
    /**
     * Environment light intensity
     * @type {number}
     * @memberof CreateSceneDto
     */
    'envIntensity'?: number;
    /**
     * Spawn position X coordinate
     * @type {number}
     * @memberof CreateSceneDto
     */
    'spawnPositionX'?: number;
    /**
     * Spawn position Y coordinate (height)
     * @type {number}
     * @memberof CreateSceneDto
     */
    'spawnPositionY'?: number;
    /**
     * Spawn position Z coordinate
     * @type {number}
     * @memberof CreateSceneDto
     */
    'spawnPositionZ'?: number;
    /**
     * Spawn rotation yaw in degrees
     * @type {number}
     * @memberof CreateSceneDto
     */
    'spawnYawDeg'?: number;
    /**
     * Navmesh asset ID for pathfinding
     * @type {string}
     * @memberof CreateSceneDto
     */
    'navmeshAssetId'?: string;
    /**
     * Shell asset ID for scene container/environment
     * @type {string}
     * @memberof CreateSceneDto
     */
    'shellAssetId'?: string;
    /**
     * Whether the shell should cast shadows
     * @type {boolean}
     * @memberof CreateSceneDto
     */
    'shellCastShadow'?: boolean;
    /**
     * Whether the shell should receive shadows
     * @type {boolean}
     * @memberof CreateSceneDto
     */
    'shellReceiveShadow'?: boolean;
}

