/* tslint:disable */
/* eslint-disable */
/**
 * Lumea API
 * # Lumea Interior Layout Generator API  Advanced AI-powered interior layout generator with explainable spatial reasoning.  ## Features - **3D Scene Management**: Create and manage complex 3D interior layouts - **Asset Processing Pipeline**: Automatic optimization with KTX2, Draco, and Meshopt variants - **Real-time Collaboration**: Server-Sent Events for live scene updates - **Optimistic Locking**: If-Match headers for safe concurrent editing - **Category-based Organization**: Enhanced scene manifests with filtering capabilities - **Processing Queue**: Background asset processing with status tracking  ## Authentication All endpoints require Bearer token authentication unless explicitly marked as public.  ## Rate Limiting - General API: 100 requests per 15 minutes per IP - Authentication: 5 attempts per 15 minutes per IP  ## Versioning Scene operations support optimistic locking via If-Match headers for safe concurrent editing.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lumea.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



/**
 * 
 * @export
 * @interface CreateAssetDto
 */
export interface CreateAssetDto {
    /**
     * Original filename of the uploaded asset
     * @type {string}
     * @memberof CreateAssetDto
     */
    'originalName': string;
    /**
     * MIME type of the asset file
     * @type {string}
     * @memberof CreateAssetDto
     */
    'mimeType': string;
    /**
     * File size in bytes
     * @type {number}
     * @memberof CreateAssetDto
     */
    'fileSize': number;
    /**
     * Current processing status of the asset
     * @type {string}
     * @memberof CreateAssetDto
     */
    'status'?: CreateAssetDtoStatusEnum;
    /**
     * URL to the original uploaded file
     * @type {string}
     * @memberof CreateAssetDto
     */
    'originalUrl'?: string;
    /**
     * URL to the meshopt-compressed version
     * @type {string}
     * @memberof CreateAssetDto
     */
    'meshoptUrl'?: string;
    /**
     * URL to the Draco-compressed version
     * @type {string}
     * @memberof CreateAssetDto
     */
    'dracoUrl'?: string;
    /**
     * URL to the generated navigation mesh
     * @type {string}
     * @memberof CreateAssetDto
     */
    'navmeshUrl'?: string;
    /**
     * Asset license type
     * @type {string}
     * @memberof CreateAssetDto
     */
    'license'?: CreateAssetDtoLicenseEnum;
    /**
     * Processing report in JSON format
     * @type {object}
     * @memberof CreateAssetDto
     */
    'reportJson'?: object;
    /**
     * Error message if processing failed
     * @type {string}
     * @memberof CreateAssetDto
     */
    'errorMessage'?: string;
    /**
     * Timestamp when processing completed
     * @type {string}
     * @memberof CreateAssetDto
     */
    'processedAt'?: string;
}

export const CreateAssetDtoStatusEnum = {
    Uploaded: 'UPLOADED',
    Processing: 'PROCESSING',
    Ready: 'READY',
    Failed: 'FAILED'
} as const;

export type CreateAssetDtoStatusEnum = typeof CreateAssetDtoStatusEnum[keyof typeof CreateAssetDtoStatusEnum];
export const CreateAssetDtoLicenseEnum = {
    Cc0: 'CC0',
    RoyaltyFree: 'ROYALTY_FREE',
    Proprietary: 'PROPRIETARY'
} as const;

export type CreateAssetDtoLicenseEnum = typeof CreateAssetDtoLicenseEnum[keyof typeof CreateAssetDtoLicenseEnum];


