/* tslint:disable */
/* eslint-disable */
/**
 * Lumea API
 * # Lumea Interior Layout Generator API  Advanced AI-powered interior layout generator with explainable spatial reasoning.  ## Features - **3D Scene Management**: Create and manage complex 3D interior layouts - **Asset Processing Pipeline**: Automatic optimization with KTX2, Draco, and Meshopt variants - **Real-time Collaboration**: Server-Sent Events for live scene updates - **Optimistic Locking**: If-Match headers for safe concurrent editing - **Category-based Organization**: Enhanced scene manifests with filtering capabilities - **Processing Queue**: Background asset processing with status tracking  ## Authentication All endpoints require Bearer token authentication unless explicitly marked as public.  ## Rate Limiting - General API: 100 requests per 15 minutes per IP - Authentication: 5 attempts per 15 minutes per IP  ## Versioning Scene operations support optimistic locking via If-Match headers for safe concurrent editing.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lumea.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AssetDownloadInfo } from '../models';
// @ts-ignore
import type { BatchDownloadDto } from '../models';
// @ts-ignore
import type { BatchDownloadResponse } from '../models';
/**
 * SceneDownloadsApi - axios parameter creator
 * @export
 */
export const SceneDownloadsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generates presigned download URL for a specific asset with caching headers
         * @summary Download specific asset
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} assetId Asset ID
         * @param {DownloadControllerDownloadAssetVariantEnum} [variant] Asset variant to download
         * @param {number} [cacheDuration] Cache duration in seconds
         * @param {boolean} [includeCdn] Include CDN URLs if available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerDownloadAsset: async (projectId: string, sceneId: string, assetId: string, variant?: DownloadControllerDownloadAssetVariantEnum, cacheDuration?: number, includeCdn?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('downloadControllerDownloadAsset', 'projectId', projectId)
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('downloadControllerDownloadAsset', 'sceneId', sceneId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('downloadControllerDownloadAsset', 'assetId', assetId)
            const localVarPath = `/projects/{projectId}/scenes/{sceneId}/download/assets/{assetId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variant !== undefined) {
                localVarQueryParameter['variant'] = variant;
            }

            if (cacheDuration !== undefined) {
                localVarQueryParameter['cacheDuration'] = cacheDuration;
            }

            if (includeCdn !== undefined) {
                localVarQueryParameter['includeCdn'] = includeCdn;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates presigned download URLs for specified asset categories in the scene
         * @summary Download specific scene assets
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {BatchDownloadDto} batchDownloadDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerDownloadBatch: async (projectId: string, sceneId: string, batchDownloadDto: BatchDownloadDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('downloadControllerDownloadBatch', 'projectId', projectId)
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('downloadControllerDownloadBatch', 'sceneId', sceneId)
            // verify required parameter 'batchDownloadDto' is not null or undefined
            assertParamExists('downloadControllerDownloadBatch', 'batchDownloadDto', batchDownloadDto)
            const localVarPath = `/projects/{projectId}/scenes/{sceneId}/download/batch`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batchDownloadDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates presigned download URLs for all assets referenced in the scene
         * @summary Download all assets in scene manifest
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {DownloadControllerDownloadManifestVariantEnum} [variant] Asset variant to download
         * @param {number} [cacheDuration] Cache duration in seconds
         * @param {boolean} [includeCdn] Include CDN URLs if available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerDownloadManifest: async (projectId: string, sceneId: string, variant?: DownloadControllerDownloadManifestVariantEnum, cacheDuration?: number, includeCdn?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('downloadControllerDownloadManifest', 'projectId', projectId)
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('downloadControllerDownloadManifest', 'sceneId', sceneId)
            const localVarPath = `/projects/{projectId}/scenes/{sceneId}/download/manifest`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variant !== undefined) {
                localVarQueryParameter['variant'] = variant;
            }

            if (cacheDuration !== undefined) {
                localVarQueryParameter['cacheDuration'] = cacheDuration;
            }

            if (includeCdn !== undefined) {
                localVarQueryParameter['includeCdn'] = includeCdn;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns asset metadata including ETag and Last-Modified for client-side caching
         * @summary Get asset metadata for caching
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} assetId Asset ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerGetAssetMetadata: async (projectId: string, sceneId: string, assetId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('downloadControllerGetAssetMetadata', 'projectId', projectId)
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('downloadControllerGetAssetMetadata', 'sceneId', sceneId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('downloadControllerGetAssetMetadata', 'assetId', assetId)
            const localVarPath = `/projects/{projectId}/scenes/{sceneId}/download/assets/{assetId}/metadata`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redirects to the presigned URL for immediate download with proper cache headers
         * @summary Direct asset download with redirect
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} assetId Asset ID
         * @param {DownloadControllerRedirectToAssetVariantEnum} [variant] Asset variant to download
         * @param {number} [cacheDuration] Cache duration in seconds
         * @param {boolean} [includeCdn] Include CDN URLs if available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerRedirectToAsset: async (projectId: string, sceneId: string, assetId: string, variant?: DownloadControllerRedirectToAssetVariantEnum, cacheDuration?: number, includeCdn?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('downloadControllerRedirectToAsset', 'projectId', projectId)
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('downloadControllerRedirectToAsset', 'sceneId', sceneId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('downloadControllerRedirectToAsset', 'assetId', assetId)
            const localVarPath = `/projects/{projectId}/scenes/{sceneId}/download/assets/{assetId}/redirect`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variant !== undefined) {
                localVarQueryParameter['variant'] = variant;
            }

            if (cacheDuration !== undefined) {
                localVarQueryParameter['cacheDuration'] = cacheDuration;
            }

            if (includeCdn !== undefined) {
                localVarQueryParameter['includeCdn'] = includeCdn;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SceneDownloadsApi - functional programming interface
 * @export
 */
export const SceneDownloadsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SceneDownloadsApiAxiosParamCreator(configuration)
    return {
        /**
         * Generates presigned download URL for a specific asset with caching headers
         * @summary Download specific asset
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} assetId Asset ID
         * @param {DownloadControllerDownloadAssetVariantEnum} [variant] Asset variant to download
         * @param {number} [cacheDuration] Cache duration in seconds
         * @param {boolean} [includeCdn] Include CDN URLs if available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadControllerDownloadAsset(projectId: string, sceneId: string, assetId: string, variant?: DownloadControllerDownloadAssetVariantEnum, cacheDuration?: number, includeCdn?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetDownloadInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadControllerDownloadAsset(projectId, sceneId, assetId, variant, cacheDuration, includeCdn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SceneDownloadsApi.downloadControllerDownloadAsset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generates presigned download URLs for specified asset categories in the scene
         * @summary Download specific scene assets
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {BatchDownloadDto} batchDownloadDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadControllerDownloadBatch(projectId: string, sceneId: string, batchDownloadDto: BatchDownloadDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchDownloadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadControllerDownloadBatch(projectId, sceneId, batchDownloadDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SceneDownloadsApi.downloadControllerDownloadBatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generates presigned download URLs for all assets referenced in the scene
         * @summary Download all assets in scene manifest
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {DownloadControllerDownloadManifestVariantEnum} [variant] Asset variant to download
         * @param {number} [cacheDuration] Cache duration in seconds
         * @param {boolean} [includeCdn] Include CDN URLs if available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadControllerDownloadManifest(projectId: string, sceneId: string, variant?: DownloadControllerDownloadManifestVariantEnum, cacheDuration?: number, includeCdn?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchDownloadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadControllerDownloadManifest(projectId, sceneId, variant, cacheDuration, includeCdn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SceneDownloadsApi.downloadControllerDownloadManifest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns asset metadata including ETag and Last-Modified for client-side caching
         * @summary Get asset metadata for caching
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} assetId Asset ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadControllerGetAssetMetadata(projectId: string, sceneId: string, assetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadControllerGetAssetMetadata(projectId, sceneId, assetId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SceneDownloadsApi.downloadControllerGetAssetMetadata']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Redirects to the presigned URL for immediate download with proper cache headers
         * @summary Direct asset download with redirect
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} assetId Asset ID
         * @param {DownloadControllerRedirectToAssetVariantEnum} [variant] Asset variant to download
         * @param {number} [cacheDuration] Cache duration in seconds
         * @param {boolean} [includeCdn] Include CDN URLs if available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadControllerRedirectToAsset(projectId: string, sceneId: string, assetId: string, variant?: DownloadControllerRedirectToAssetVariantEnum, cacheDuration?: number, includeCdn?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadControllerRedirectToAsset(projectId, sceneId, assetId, variant, cacheDuration, includeCdn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SceneDownloadsApi.downloadControllerRedirectToAsset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SceneDownloadsApi - factory interface
 * @export
 */
export const SceneDownloadsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SceneDownloadsApiFp(configuration)
    return {
        /**
         * Generates presigned download URL for a specific asset with caching headers
         * @summary Download specific asset
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} assetId Asset ID
         * @param {DownloadControllerDownloadAssetVariantEnum} [variant] Asset variant to download
         * @param {number} [cacheDuration] Cache duration in seconds
         * @param {boolean} [includeCdn] Include CDN URLs if available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerDownloadAsset(projectId: string, sceneId: string, assetId: string, variant?: DownloadControllerDownloadAssetVariantEnum, cacheDuration?: number, includeCdn?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<AssetDownloadInfo> {
            return localVarFp.downloadControllerDownloadAsset(projectId, sceneId, assetId, variant, cacheDuration, includeCdn, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates presigned download URLs for specified asset categories in the scene
         * @summary Download specific scene assets
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {BatchDownloadDto} batchDownloadDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerDownloadBatch(projectId: string, sceneId: string, batchDownloadDto: BatchDownloadDto, options?: RawAxiosRequestConfig): AxiosPromise<BatchDownloadResponse> {
            return localVarFp.downloadControllerDownloadBatch(projectId, sceneId, batchDownloadDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates presigned download URLs for all assets referenced in the scene
         * @summary Download all assets in scene manifest
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {DownloadControllerDownloadManifestVariantEnum} [variant] Asset variant to download
         * @param {number} [cacheDuration] Cache duration in seconds
         * @param {boolean} [includeCdn] Include CDN URLs if available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerDownloadManifest(projectId: string, sceneId: string, variant?: DownloadControllerDownloadManifestVariantEnum, cacheDuration?: number, includeCdn?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<BatchDownloadResponse> {
            return localVarFp.downloadControllerDownloadManifest(projectId, sceneId, variant, cacheDuration, includeCdn, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns asset metadata including ETag and Last-Modified for client-side caching
         * @summary Get asset metadata for caching
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} assetId Asset ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerGetAssetMetadata(projectId: string, sceneId: string, assetId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.downloadControllerGetAssetMetadata(projectId, sceneId, assetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Redirects to the presigned URL for immediate download with proper cache headers
         * @summary Direct asset download with redirect
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} assetId Asset ID
         * @param {DownloadControllerRedirectToAssetVariantEnum} [variant] Asset variant to download
         * @param {number} [cacheDuration] Cache duration in seconds
         * @param {boolean} [includeCdn] Include CDN URLs if available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerRedirectToAsset(projectId: string, sceneId: string, assetId: string, variant?: DownloadControllerRedirectToAssetVariantEnum, cacheDuration?: number, includeCdn?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.downloadControllerRedirectToAsset(projectId, sceneId, assetId, variant, cacheDuration, includeCdn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SceneDownloadsApi - object-oriented interface
 * @export
 * @class SceneDownloadsApi
 * @extends {BaseAPI}
 */
export class SceneDownloadsApi extends BaseAPI {
    /**
     * Generates presigned download URL for a specific asset with caching headers
     * @summary Download specific asset
     * @param {string} projectId Project ID
     * @param {string} sceneId Scene ID
     * @param {string} assetId Asset ID
     * @param {DownloadControllerDownloadAssetVariantEnum} [variant] Asset variant to download
     * @param {number} [cacheDuration] Cache duration in seconds
     * @param {boolean} [includeCdn] Include CDN URLs if available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SceneDownloadsApi
     */
    public downloadControllerDownloadAsset(projectId: string, sceneId: string, assetId: string, variant?: DownloadControllerDownloadAssetVariantEnum, cacheDuration?: number, includeCdn?: boolean, options?: RawAxiosRequestConfig) {
        return SceneDownloadsApiFp(this.configuration).downloadControllerDownloadAsset(projectId, sceneId, assetId, variant, cacheDuration, includeCdn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates presigned download URLs for specified asset categories in the scene
     * @summary Download specific scene assets
     * @param {string} projectId Project ID
     * @param {string} sceneId Scene ID
     * @param {BatchDownloadDto} batchDownloadDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SceneDownloadsApi
     */
    public downloadControllerDownloadBatch(projectId: string, sceneId: string, batchDownloadDto: BatchDownloadDto, options?: RawAxiosRequestConfig) {
        return SceneDownloadsApiFp(this.configuration).downloadControllerDownloadBatch(projectId, sceneId, batchDownloadDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates presigned download URLs for all assets referenced in the scene
     * @summary Download all assets in scene manifest
     * @param {string} projectId Project ID
     * @param {string} sceneId Scene ID
     * @param {DownloadControllerDownloadManifestVariantEnum} [variant] Asset variant to download
     * @param {number} [cacheDuration] Cache duration in seconds
     * @param {boolean} [includeCdn] Include CDN URLs if available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SceneDownloadsApi
     */
    public downloadControllerDownloadManifest(projectId: string, sceneId: string, variant?: DownloadControllerDownloadManifestVariantEnum, cacheDuration?: number, includeCdn?: boolean, options?: RawAxiosRequestConfig) {
        return SceneDownloadsApiFp(this.configuration).downloadControllerDownloadManifest(projectId, sceneId, variant, cacheDuration, includeCdn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns asset metadata including ETag and Last-Modified for client-side caching
     * @summary Get asset metadata for caching
     * @param {string} projectId Project ID
     * @param {string} sceneId Scene ID
     * @param {string} assetId Asset ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SceneDownloadsApi
     */
    public downloadControllerGetAssetMetadata(projectId: string, sceneId: string, assetId: string, options?: RawAxiosRequestConfig) {
        return SceneDownloadsApiFp(this.configuration).downloadControllerGetAssetMetadata(projectId, sceneId, assetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redirects to the presigned URL for immediate download with proper cache headers
     * @summary Direct asset download with redirect
     * @param {string} projectId Project ID
     * @param {string} sceneId Scene ID
     * @param {string} assetId Asset ID
     * @param {DownloadControllerRedirectToAssetVariantEnum} [variant] Asset variant to download
     * @param {number} [cacheDuration] Cache duration in seconds
     * @param {boolean} [includeCdn] Include CDN URLs if available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SceneDownloadsApi
     */
    public downloadControllerRedirectToAsset(projectId: string, sceneId: string, assetId: string, variant?: DownloadControllerRedirectToAssetVariantEnum, cacheDuration?: number, includeCdn?: boolean, options?: RawAxiosRequestConfig) {
        return SceneDownloadsApiFp(this.configuration).downloadControllerRedirectToAsset(projectId, sceneId, assetId, variant, cacheDuration, includeCdn, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const DownloadControllerDownloadAssetVariantEnum = {
    Original: 'original',
    Meshopt: 'meshopt',
    Draco: 'draco',
    Navmesh: 'navmesh'
} as const;
export type DownloadControllerDownloadAssetVariantEnum = typeof DownloadControllerDownloadAssetVariantEnum[keyof typeof DownloadControllerDownloadAssetVariantEnum];
/**
 * @export
 */
export const DownloadControllerDownloadManifestVariantEnum = {
    Original: 'original',
    Meshopt: 'meshopt',
    Draco: 'draco',
    Navmesh: 'navmesh'
} as const;
export type DownloadControllerDownloadManifestVariantEnum = typeof DownloadControllerDownloadManifestVariantEnum[keyof typeof DownloadControllerDownloadManifestVariantEnum];
/**
 * @export
 */
export const DownloadControllerRedirectToAssetVariantEnum = {
    Original: 'original',
    Meshopt: 'meshopt',
    Draco: 'draco',
    Navmesh: 'navmesh'
} as const;
export type DownloadControllerRedirectToAssetVariantEnum = typeof DownloadControllerRedirectToAssetVariantEnum[keyof typeof DownloadControllerRedirectToAssetVariantEnum];
