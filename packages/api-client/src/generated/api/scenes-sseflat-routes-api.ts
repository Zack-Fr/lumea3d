/* tslint:disable */
/* eslint-disable */
/**
 * Lumea API
 * # Lumea Interior Layout Generator API  Advanced AI-powered interior layout generator with explainable spatial reasoning.  ## Features - **3D Scene Management**: Create and manage complex 3D interior layouts - **Asset Processing Pipeline**: Automatic optimization with KTX2, Draco, and Meshopt variants - **Real-time Collaboration**: Server-Sent Events for live scene updates - **Optimistic Locking**: If-Match headers for safe concurrent editing - **Category-based Organization**: Enhanced scene manifests with filtering capabilities - **Processing Queue**: Background asset processing with status tracking  ## Authentication All endpoints require Bearer token authentication unless explicitly marked as public.  ## Rate Limiting - General API: 100 requests per 15 minutes per IP - Authentication: 5 attempts per 15 minutes per IP  ## Versioning Scene operations support optimistic locking via If-Match headers for safe concurrent editing.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lumea.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * ScenesSSEFlatRoutesApi - axios parameter creator
 * @export
 */
export const ScenesSSEFlatRoutesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Flat route alias for realtime scene updates when WebSockets are not available. Supports Last-Event-ID for reconnection.
         * @summary Connect to scene events via Server-Sent Events (SSE) - Flat Route
         * @param {string} sceneId Scene ID
         * @param {string} lastEventId 
         * @param {string} [clientId] Optional client identifier for reconnection
         * @param {string} [lastEventID] Last received event ID for resuming connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesSSEControllerStreamSceneEvents: async (sceneId: string, lastEventId: string, clientId?: string, lastEventID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('flatScenesSSEControllerStreamSceneEvents', 'sceneId', sceneId)
            // verify required parameter 'lastEventId' is not null or undefined
            assertParamExists('flatScenesSSEControllerStreamSceneEvents', 'lastEventId', lastEventId)
            const localVarPath = `/scenes/{sceneId}/events`
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }


    
            if (lastEventId != null) {
                localVarHeaderParameter['last-event-id'] = String(lastEventId);
            }
            if (lastEventID != null) {
                localVarHeaderParameter['Last-Event-ID'] = String(lastEventID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScenesSSEFlatRoutesApi - functional programming interface
 * @export
 */
export const ScenesSSEFlatRoutesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScenesSSEFlatRoutesApiAxiosParamCreator(configuration)
    return {
        /**
         * Flat route alias for realtime scene updates when WebSockets are not available. Supports Last-Event-ID for reconnection.
         * @summary Connect to scene events via Server-Sent Events (SSE) - Flat Route
         * @param {string} sceneId Scene ID
         * @param {string} lastEventId 
         * @param {string} [clientId] Optional client identifier for reconnection
         * @param {string} [lastEventID] Last received event ID for resuming connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flatScenesSSEControllerStreamSceneEvents(sceneId: string, lastEventId: string, clientId?: string, lastEventID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flatScenesSSEControllerStreamSceneEvents(sceneId, lastEventId, clientId, lastEventID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScenesSSEFlatRoutesApi.flatScenesSSEControllerStreamSceneEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ScenesSSEFlatRoutesApi - factory interface
 * @export
 */
export const ScenesSSEFlatRoutesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScenesSSEFlatRoutesApiFp(configuration)
    return {
        /**
         * Flat route alias for realtime scene updates when WebSockets are not available. Supports Last-Event-ID for reconnection.
         * @summary Connect to scene events via Server-Sent Events (SSE) - Flat Route
         * @param {string} sceneId Scene ID
         * @param {string} lastEventId 
         * @param {string} [clientId] Optional client identifier for reconnection
         * @param {string} [lastEventID] Last received event ID for resuming connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesSSEControllerStreamSceneEvents(sceneId: string, lastEventId: string, clientId?: string, lastEventID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.flatScenesSSEControllerStreamSceneEvents(sceneId, lastEventId, clientId, lastEventID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScenesSSEFlatRoutesApi - object-oriented interface
 * @export
 * @class ScenesSSEFlatRoutesApi
 * @extends {BaseAPI}
 */
export class ScenesSSEFlatRoutesApi extends BaseAPI {
    /**
     * Flat route alias for realtime scene updates when WebSockets are not available. Supports Last-Event-ID for reconnection.
     * @summary Connect to scene events via Server-Sent Events (SSE) - Flat Route
     * @param {string} sceneId Scene ID
     * @param {string} lastEventId 
     * @param {string} [clientId] Optional client identifier for reconnection
     * @param {string} [lastEventID] Last received event ID for resuming connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenesSSEFlatRoutesApi
     */
    public flatScenesSSEControllerStreamSceneEvents(sceneId: string, lastEventId: string, clientId?: string, lastEventID?: string, options?: RawAxiosRequestConfig) {
        return ScenesSSEFlatRoutesApiFp(this.configuration).flatScenesSSEControllerStreamSceneEvents(sceneId, lastEventId, clientId, lastEventID, options).then((request) => request(this.axios, this.basePath));
    }
}

