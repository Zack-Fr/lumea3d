/* tslint:disable */
/* eslint-disable */
/**
 * Lumea API
 * # Lumea Interior Layout Generator API  Advanced AI-powered interior layout generator with explainable spatial reasoning.  ## Features - **3D Scene Management**: Create and manage complex 3D interior layouts - **Asset Processing Pipeline**: Automatic optimization with KTX2, Draco, and Meshopt variants - **Real-time Collaboration**: Server-Sent Events for live scene updates - **Optimistic Locking**: If-Match headers for safe concurrent editing - **Category-based Organization**: Enhanced scene manifests with filtering capabilities - **Processing Queue**: Background asset processing with status tracking  ## Authentication All endpoints require Bearer token authentication unless explicitly marked as public.  ## Rate Limiting - General API: 100 requests per 15 minutes per IP - Authentication: 5 attempts per 15 minutes per IP  ## Versioning Scene operations support optimistic locking via If-Match headers for safe concurrent editing.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lumea.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateSceneDto } from '../models';
// @ts-ignore
import type { CreateSceneItemDto } from '../models';
// @ts-ignore
import type { SceneDelta } from '../models';
// @ts-ignore
import type { SceneManifestV2 } from '../models';
// @ts-ignore
import type { UpdateSceneDto } from '../models';
// @ts-ignore
import type { UpdateSceneItemDto } from '../models';
/**
 * ScenesLegacyDeprecatedApi - axios parameter creator
 * @export
 */
export const ScenesLegacyDeprecatedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add an item to a scene
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {CreateSceneItemDto} createSceneItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerAddItem: async (projectId: string, sceneId: string, createSceneItemDto: CreateSceneItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('scenesControllerAddItem', 'projectId', projectId)
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('scenesControllerAddItem', 'sceneId', sceneId)
            // verify required parameter 'createSceneItemDto' is not null or undefined
            assertParamExists('scenesControllerAddItem', 'createSceneItemDto', createSceneItemDto)
            const localVarPath = `/projects/{projectId}/scenes/{sceneId}/items`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSceneItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DEPRECATED: Use flat route POST /scenes instead. Will be removed on 2025-11-05.
         * @summary Create a new 3D scene
         * @param {string} projectId Project ID
         * @param {CreateSceneDto} createSceneDto 
         * @param {string} [sunset] Date when this endpoint will be removed
         * @param {string} [deprecation] Indicates this endpoint is deprecated
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        scenesControllerCreate: async (projectId: string, createSceneDto: CreateSceneDto, sunset?: string, deprecation?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('scenesControllerCreate', 'projectId', projectId)
            // verify required parameter 'createSceneDto' is not null or undefined
            assertParamExists('scenesControllerCreate', 'createSceneDto', createSceneDto)
            const localVarPath = `/projects/{projectId}/scenes`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (sunset != null) {
                localVarHeaderParameter['Sunset'] = String(sunset);
            }
            if (deprecation != null) {
                localVarHeaderParameter['Deprecation'] = String(deprecation);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSceneDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all scenes in a project
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerFindAll: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('scenesControllerFindAll', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/scenes`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific scene with items
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerFindOne: async (projectId: string, sceneId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('scenesControllerFindOne', 'projectId', projectId)
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('scenesControllerFindOne', 'sceneId', sceneId)
            const localVarPath = `/projects/{projectId}/scenes/{sceneId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns operations needed to transform scene from one version to another
         * @summary Generate delta between scene versions
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {number} fromVersion Source version
         * @param {number} toVersion Target version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerGenerateDelta: async (projectId: string, sceneId: string, fromVersion: number, toVersion: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('scenesControllerGenerateDelta', 'projectId', projectId)
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('scenesControllerGenerateDelta', 'sceneId', sceneId)
            // verify required parameter 'fromVersion' is not null or undefined
            assertParamExists('scenesControllerGenerateDelta', 'fromVersion', fromVersion)
            // verify required parameter 'toVersion' is not null or undefined
            assertParamExists('scenesControllerGenerateDelta', 'toVersion', toVersion)
            const localVarPath = `/projects/{projectId}/scenes/{sceneId}/delta`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromVersion !== undefined) {
                localVarQueryParameter['fromVersion'] = fromVersion;
            }

            if (toVersion !== undefined) {
                localVarQueryParameter['toVersion'] = toVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DEPRECATED: Use flat route GET /scenes/{sceneId}/manifest instead. Will be removed on 2025-11-05. Returns a complete scene manifest with all items, transforms, and asset references
         * @summary Generate scene manifest for client consumption
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} [link] Link to successor endpoint
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        scenesControllerGenerateManifest: async (projectId: string, sceneId: string, link?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('scenesControllerGenerateManifest', 'projectId', projectId)
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('scenesControllerGenerateManifest', 'sceneId', sceneId)
            const localVarPath = `/projects/{projectId}/scenes/{sceneId}/manifest`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (link != null) {
                localVarHeaderParameter['Link'] = String(link);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the current version number for optimistic locking
         * @summary Get current scene version
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerGetVersion: async (projectId: string, sceneId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('scenesControllerGetVersion', 'projectId', projectId)
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('scenesControllerGetVersion', 'sceneId', sceneId)
            const localVarPath = `/projects/{projectId}/scenes/{sceneId}/version`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a scene and all its items
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerRemove: async (projectId: string, sceneId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('scenesControllerRemove', 'projectId', projectId)
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('scenesControllerRemove', 'sceneId', sceneId)
            const localVarPath = `/projects/{projectId}/scenes/{sceneId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove an item from a scene
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} itemId Scene item ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerRemoveItem: async (projectId: string, sceneId: string, itemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('scenesControllerRemoveItem', 'projectId', projectId)
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('scenesControllerRemoveItem', 'sceneId', sceneId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('scenesControllerRemoveItem', 'itemId', itemId)
            const localVarPath = `/projects/{projectId}/scenes/{sceneId}/items/{itemId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update scene properties
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {UpdateSceneDto} updateSceneDto 
         * @param {number} [version] Expected scene version for optimistic locking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerUpdate: async (projectId: string, sceneId: string, updateSceneDto: UpdateSceneDto, version?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('scenesControllerUpdate', 'projectId', projectId)
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('scenesControllerUpdate', 'sceneId', sceneId)
            // verify required parameter 'updateSceneDto' is not null or undefined
            assertParamExists('scenesControllerUpdate', 'updateSceneDto', updateSceneDto)
            const localVarPath = `/projects/{projectId}/scenes/{sceneId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSceneDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a scene item
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} itemId Scene item ID
         * @param {UpdateSceneItemDto} updateSceneItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerUpdateItem: async (projectId: string, sceneId: string, itemId: string, updateSceneItemDto: UpdateSceneItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('scenesControllerUpdateItem', 'projectId', projectId)
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('scenesControllerUpdateItem', 'sceneId', sceneId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('scenesControllerUpdateItem', 'itemId', itemId)
            // verify required parameter 'updateSceneItemDto' is not null or undefined
            assertParamExists('scenesControllerUpdateItem', 'updateSceneItemDto', updateSceneItemDto)
            const localVarPath = `/projects/{projectId}/scenes/{sceneId}/items/{itemId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSceneItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScenesLegacyDeprecatedApi - functional programming interface
 * @export
 */
export const ScenesLegacyDeprecatedApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScenesLegacyDeprecatedApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add an item to a scene
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {CreateSceneItemDto} createSceneItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scenesControllerAddItem(projectId: string, sceneId: string, createSceneItemDto: CreateSceneItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scenesControllerAddItem(projectId, sceneId, createSceneItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScenesLegacyDeprecatedApi.scenesControllerAddItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * DEPRECATED: Use flat route POST /scenes instead. Will be removed on 2025-11-05.
         * @summary Create a new 3D scene
         * @param {string} projectId Project ID
         * @param {CreateSceneDto} createSceneDto 
         * @param {string} [sunset] Date when this endpoint will be removed
         * @param {string} [deprecation] Indicates this endpoint is deprecated
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async scenesControllerCreate(projectId: string, createSceneDto: CreateSceneDto, sunset?: string, deprecation?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scenesControllerCreate(projectId, createSceneDto, sunset, deprecation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScenesLegacyDeprecatedApi.scenesControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all scenes in a project
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scenesControllerFindAll(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scenesControllerFindAll(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScenesLegacyDeprecatedApi.scenesControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a specific scene with items
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scenesControllerFindOne(projectId: string, sceneId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scenesControllerFindOne(projectId, sceneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScenesLegacyDeprecatedApi.scenesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns operations needed to transform scene from one version to another
         * @summary Generate delta between scene versions
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {number} fromVersion Source version
         * @param {number} toVersion Target version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scenesControllerGenerateDelta(projectId: string, sceneId: string, fromVersion: number, toVersion: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SceneDelta>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scenesControllerGenerateDelta(projectId, sceneId, fromVersion, toVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScenesLegacyDeprecatedApi.scenesControllerGenerateDelta']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * DEPRECATED: Use flat route GET /scenes/{sceneId}/manifest instead. Will be removed on 2025-11-05. Returns a complete scene manifest with all items, transforms, and asset references
         * @summary Generate scene manifest for client consumption
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} [link] Link to successor endpoint
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async scenesControllerGenerateManifest(projectId: string, sceneId: string, link?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SceneManifestV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scenesControllerGenerateManifest(projectId, sceneId, link, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScenesLegacyDeprecatedApi.scenesControllerGenerateManifest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the current version number for optimistic locking
         * @summary Get current scene version
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scenesControllerGetVersion(projectId: string, sceneId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scenesControllerGetVersion(projectId, sceneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScenesLegacyDeprecatedApi.scenesControllerGetVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a scene and all its items
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scenesControllerRemove(projectId: string, sceneId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scenesControllerRemove(projectId, sceneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScenesLegacyDeprecatedApi.scenesControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove an item from a scene
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} itemId Scene item ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scenesControllerRemoveItem(projectId: string, sceneId: string, itemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scenesControllerRemoveItem(projectId, sceneId, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScenesLegacyDeprecatedApi.scenesControllerRemoveItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update scene properties
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {UpdateSceneDto} updateSceneDto 
         * @param {number} [version] Expected scene version for optimistic locking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scenesControllerUpdate(projectId: string, sceneId: string, updateSceneDto: UpdateSceneDto, version?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scenesControllerUpdate(projectId, sceneId, updateSceneDto, version, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScenesLegacyDeprecatedApi.scenesControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a scene item
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} itemId Scene item ID
         * @param {UpdateSceneItemDto} updateSceneItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scenesControllerUpdateItem(projectId: string, sceneId: string, itemId: string, updateSceneItemDto: UpdateSceneItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scenesControllerUpdateItem(projectId, sceneId, itemId, updateSceneItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScenesLegacyDeprecatedApi.scenesControllerUpdateItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ScenesLegacyDeprecatedApi - factory interface
 * @export
 */
export const ScenesLegacyDeprecatedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScenesLegacyDeprecatedApiFp(configuration)
    return {
        /**
         * 
         * @summary Add an item to a scene
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {CreateSceneItemDto} createSceneItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerAddItem(projectId: string, sceneId: string, createSceneItemDto: CreateSceneItemDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scenesControllerAddItem(projectId, sceneId, createSceneItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * DEPRECATED: Use flat route POST /scenes instead. Will be removed on 2025-11-05.
         * @summary Create a new 3D scene
         * @param {string} projectId Project ID
         * @param {CreateSceneDto} createSceneDto 
         * @param {string} [sunset] Date when this endpoint will be removed
         * @param {string} [deprecation] Indicates this endpoint is deprecated
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        scenesControllerCreate(projectId: string, createSceneDto: CreateSceneDto, sunset?: string, deprecation?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scenesControllerCreate(projectId, createSceneDto, sunset, deprecation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all scenes in a project
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerFindAll(projectId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scenesControllerFindAll(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific scene with items
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerFindOne(projectId: string, sceneId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scenesControllerFindOne(projectId, sceneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns operations needed to transform scene from one version to another
         * @summary Generate delta between scene versions
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {number} fromVersion Source version
         * @param {number} toVersion Target version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerGenerateDelta(projectId: string, sceneId: string, fromVersion: number, toVersion: number, options?: RawAxiosRequestConfig): AxiosPromise<SceneDelta> {
            return localVarFp.scenesControllerGenerateDelta(projectId, sceneId, fromVersion, toVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * DEPRECATED: Use flat route GET /scenes/{sceneId}/manifest instead. Will be removed on 2025-11-05. Returns a complete scene manifest with all items, transforms, and asset references
         * @summary Generate scene manifest for client consumption
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} [link] Link to successor endpoint
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        scenesControllerGenerateManifest(projectId: string, sceneId: string, link?: string, options?: RawAxiosRequestConfig): AxiosPromise<SceneManifestV2> {
            return localVarFp.scenesControllerGenerateManifest(projectId, sceneId, link, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the current version number for optimistic locking
         * @summary Get current scene version
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerGetVersion(projectId: string, sceneId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scenesControllerGetVersion(projectId, sceneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a scene and all its items
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerRemove(projectId: string, sceneId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scenesControllerRemove(projectId, sceneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove an item from a scene
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} itemId Scene item ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerRemoveItem(projectId: string, sceneId: string, itemId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scenesControllerRemoveItem(projectId, sceneId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update scene properties
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {UpdateSceneDto} updateSceneDto 
         * @param {number} [version] Expected scene version for optimistic locking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerUpdate(projectId: string, sceneId: string, updateSceneDto: UpdateSceneDto, version?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scenesControllerUpdate(projectId, sceneId, updateSceneDto, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a scene item
         * @param {string} projectId Project ID
         * @param {string} sceneId Scene ID
         * @param {string} itemId Scene item ID
         * @param {UpdateSceneItemDto} updateSceneItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scenesControllerUpdateItem(projectId: string, sceneId: string, itemId: string, updateSceneItemDto: UpdateSceneItemDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scenesControllerUpdateItem(projectId, sceneId, itemId, updateSceneItemDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScenesLegacyDeprecatedApi - object-oriented interface
 * @export
 * @class ScenesLegacyDeprecatedApi
 * @extends {BaseAPI}
 */
export class ScenesLegacyDeprecatedApi extends BaseAPI {
    /**
     * 
     * @summary Add an item to a scene
     * @param {string} projectId Project ID
     * @param {string} sceneId Scene ID
     * @param {CreateSceneItemDto} createSceneItemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenesLegacyDeprecatedApi
     */
    public scenesControllerAddItem(projectId: string, sceneId: string, createSceneItemDto: CreateSceneItemDto, options?: RawAxiosRequestConfig) {
        return ScenesLegacyDeprecatedApiFp(this.configuration).scenesControllerAddItem(projectId, sceneId, createSceneItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * DEPRECATED: Use flat route POST /scenes instead. Will be removed on 2025-11-05.
     * @summary Create a new 3D scene
     * @param {string} projectId Project ID
     * @param {CreateSceneDto} createSceneDto 
     * @param {string} [sunset] Date when this endpoint will be removed
     * @param {string} [deprecation] Indicates this endpoint is deprecated
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ScenesLegacyDeprecatedApi
     */
    public scenesControllerCreate(projectId: string, createSceneDto: CreateSceneDto, sunset?: string, deprecation?: string, options?: RawAxiosRequestConfig) {
        return ScenesLegacyDeprecatedApiFp(this.configuration).scenesControllerCreate(projectId, createSceneDto, sunset, deprecation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all scenes in a project
     * @param {string} projectId Project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenesLegacyDeprecatedApi
     */
    public scenesControllerFindAll(projectId: string, options?: RawAxiosRequestConfig) {
        return ScenesLegacyDeprecatedApiFp(this.configuration).scenesControllerFindAll(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific scene with items
     * @param {string} projectId Project ID
     * @param {string} sceneId Scene ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenesLegacyDeprecatedApi
     */
    public scenesControllerFindOne(projectId: string, sceneId: string, options?: RawAxiosRequestConfig) {
        return ScenesLegacyDeprecatedApiFp(this.configuration).scenesControllerFindOne(projectId, sceneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns operations needed to transform scene from one version to another
     * @summary Generate delta between scene versions
     * @param {string} projectId Project ID
     * @param {string} sceneId Scene ID
     * @param {number} fromVersion Source version
     * @param {number} toVersion Target version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenesLegacyDeprecatedApi
     */
    public scenesControllerGenerateDelta(projectId: string, sceneId: string, fromVersion: number, toVersion: number, options?: RawAxiosRequestConfig) {
        return ScenesLegacyDeprecatedApiFp(this.configuration).scenesControllerGenerateDelta(projectId, sceneId, fromVersion, toVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * DEPRECATED: Use flat route GET /scenes/{sceneId}/manifest instead. Will be removed on 2025-11-05. Returns a complete scene manifest with all items, transforms, and asset references
     * @summary Generate scene manifest for client consumption
     * @param {string} projectId Project ID
     * @param {string} sceneId Scene ID
     * @param {string} [link] Link to successor endpoint
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ScenesLegacyDeprecatedApi
     */
    public scenesControllerGenerateManifest(projectId: string, sceneId: string, link?: string, options?: RawAxiosRequestConfig) {
        return ScenesLegacyDeprecatedApiFp(this.configuration).scenesControllerGenerateManifest(projectId, sceneId, link, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the current version number for optimistic locking
     * @summary Get current scene version
     * @param {string} projectId Project ID
     * @param {string} sceneId Scene ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenesLegacyDeprecatedApi
     */
    public scenesControllerGetVersion(projectId: string, sceneId: string, options?: RawAxiosRequestConfig) {
        return ScenesLegacyDeprecatedApiFp(this.configuration).scenesControllerGetVersion(projectId, sceneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a scene and all its items
     * @param {string} projectId Project ID
     * @param {string} sceneId Scene ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenesLegacyDeprecatedApi
     */
    public scenesControllerRemove(projectId: string, sceneId: string, options?: RawAxiosRequestConfig) {
        return ScenesLegacyDeprecatedApiFp(this.configuration).scenesControllerRemove(projectId, sceneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove an item from a scene
     * @param {string} projectId Project ID
     * @param {string} sceneId Scene ID
     * @param {string} itemId Scene item ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenesLegacyDeprecatedApi
     */
    public scenesControllerRemoveItem(projectId: string, sceneId: string, itemId: string, options?: RawAxiosRequestConfig) {
        return ScenesLegacyDeprecatedApiFp(this.configuration).scenesControllerRemoveItem(projectId, sceneId, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update scene properties
     * @param {string} projectId Project ID
     * @param {string} sceneId Scene ID
     * @param {UpdateSceneDto} updateSceneDto 
     * @param {number} [version] Expected scene version for optimistic locking
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenesLegacyDeprecatedApi
     */
    public scenesControllerUpdate(projectId: string, sceneId: string, updateSceneDto: UpdateSceneDto, version?: number, options?: RawAxiosRequestConfig) {
        return ScenesLegacyDeprecatedApiFp(this.configuration).scenesControllerUpdate(projectId, sceneId, updateSceneDto, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a scene item
     * @param {string} projectId Project ID
     * @param {string} sceneId Scene ID
     * @param {string} itemId Scene item ID
     * @param {UpdateSceneItemDto} updateSceneItemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenesLegacyDeprecatedApi
     */
    public scenesControllerUpdateItem(projectId: string, sceneId: string, itemId: string, updateSceneItemDto: UpdateSceneItemDto, options?: RawAxiosRequestConfig) {
        return ScenesLegacyDeprecatedApiFp(this.configuration).scenesControllerUpdateItem(projectId, sceneId, itemId, updateSceneItemDto, options).then((request) => request(this.axios, this.basePath));
    }
}

