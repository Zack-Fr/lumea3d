/* tslint:disable */
/* eslint-disable */
/**
 * Lumea API
 * # Lumea Interior Layout Generator API  Advanced AI-powered interior layout generator with explainable spatial reasoning.  ## Features - **3D Scene Management**: Create and manage complex 3D interior layouts - **Asset Processing Pipeline**: Automatic optimization with KTX2, Draco, and Meshopt variants - **Real-time Collaboration**: Server-Sent Events for live scene updates - **Optimistic Locking**: If-Match headers for safe concurrent editing - **Category-based Organization**: Enhanced scene manifests with filtering capabilities - **Processing Queue**: Background asset processing with status tracking  ## Authentication All endpoints require Bearer token authentication unless explicitly marked as public.  ## Rate Limiting - General API: 100 requests per 15 minutes per IP - Authentication: 5 attempts per 15 minutes per IP  ## Versioning Scene operations support optimistic locking via If-Match headers for safe concurrent editing.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lumea.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateSceneItemDto } from '../models';
// @ts-ignore
import type { FlatScenesControllerGetSceneCategories200Response } from '../models';
// @ts-ignore
import type { SceneDelta } from '../models';
// @ts-ignore
import type { SceneManifestV2 } from '../models';
// @ts-ignore
import type { UpdateSceneDto } from '../models';
// @ts-ignore
import type { UpdateSceneItemDto } from '../models';
/**
 * FlatScenesApi - axios parameter creator
 * @export
 */
export const FlatScenesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Flat route - no project ID required in path. Requires If-Match header for optimistic locking.
         * @summary Add an item to a scene
         * @param {string} sceneId Scene ID
         * @param {string} ifMatch 
         * @param {string} ifMatch2 Expected scene version for optimistic locking
         * @param {CreateSceneItemDto} createSceneItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerAddItem: async (sceneId: string, ifMatch: string, ifMatch2: string, createSceneItemDto: CreateSceneItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('flatScenesControllerAddItem', 'sceneId', sceneId)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('flatScenesControllerAddItem', 'ifMatch', ifMatch)
            // verify required parameter 'ifMatch2' is not null or undefined
            assertParamExists('flatScenesControllerAddItem', 'ifMatch2', ifMatch2)
            // verify required parameter 'createSceneItemDto' is not null or undefined
            assertParamExists('flatScenesControllerAddItem', 'createSceneItemDto', createSceneItemDto)
            const localVarPath = `/scenes/{sceneId}/items`
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (ifMatch != null) {
                localVarHeaderParameter['if-match'] = String(ifMatch);
            }
            if (ifMatch2 != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch2);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSceneItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Flat route - no project ID required in path
         * @summary Get a specific scene with items
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerFindOne: async (sceneId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('flatScenesControllerFindOne', 'sceneId', sceneId)
            const localVarPath = `/scenes/{sceneId}`
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Flat route - returns operations needed to transform scene from one version to another
         * @summary Generate delta between scene versions
         * @param {string} sceneId Scene ID
         * @param {number} fromVersion Source version
         * @param {number} toVersion Target version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerGenerateDelta: async (sceneId: string, fromVersion: number, toVersion: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('flatScenesControllerGenerateDelta', 'sceneId', sceneId)
            // verify required parameter 'fromVersion' is not null or undefined
            assertParamExists('flatScenesControllerGenerateDelta', 'fromVersion', fromVersion)
            // verify required parameter 'toVersion' is not null or undefined
            assertParamExists('flatScenesControllerGenerateDelta', 'toVersion', toVersion)
            const localVarPath = `/scenes/{sceneId}/delta`
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromVersion !== undefined) {
                localVarQueryParameter['fromVersion'] = fromVersion;
            }

            if (toVersion !== undefined) {
                localVarQueryParameter['toVersion'] = toVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Flat route - returns a complete scene manifest with all items, transforms, and asset references. Supports category filtering.
         * @summary Generate scene manifest for client consumption
         * @param {string} sceneId Scene ID
         * @param {string} [categories] Comma-separated list of category keys to include in manifest. If not provided, all categories are included.
         * @param {boolean} [includeMetadata] Include additional category metadata like descriptions, tags, and configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerGenerateManifest: async (sceneId: string, categories?: string, includeMetadata?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('flatScenesControllerGenerateManifest', 'sceneId', sceneId)
            const localVarPath = `/scenes/{sceneId}/manifest`
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categories !== undefined) {
                localVarQueryParameter['categories'] = categories;
            }

            if (includeMetadata !== undefined) {
                localVarQueryParameter['includeMetadata'] = includeMetadata;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Flat route - returns all unique categories used by items in the scene with their metadata
         * @summary Get available categories in scene
         * @param {string} sceneId Scene ID
         * @param {string} [projectId] Filter by project ID
         * @param {string} [categoryKey] Filter by category key
         * @param {boolean} [instancing] Filter by instancing enabled
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerGetSceneCategories: async (sceneId: string, projectId?: string, categoryKey?: string, instancing?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('flatScenesControllerGetSceneCategories', 'sceneId', sceneId)
            const localVarPath = `/scenes/{sceneId}/categories`
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (categoryKey !== undefined) {
                localVarQueryParameter['categoryKey'] = categoryKey;
            }

            if (instancing !== undefined) {
                localVarQueryParameter['instancing'] = instancing;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Flat route - returns the current version number for optimistic locking
         * @summary Get current scene version
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerGetVersion: async (sceneId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('flatScenesControllerGetVersion', 'sceneId', sceneId)
            const localVarPath = `/scenes/{sceneId}/version`
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Flat route - no project ID required in path
         * @summary Delete a scene and all its items
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerRemove: async (sceneId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('flatScenesControllerRemove', 'sceneId', sceneId)
            const localVarPath = `/scenes/{sceneId}`
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Flat route - no project ID required in path. Requires If-Match header for optimistic locking.
         * @summary Remove an item from a scene
         * @param {string} sceneId Scene ID
         * @param {string} itemId Scene item ID
         * @param {string} ifMatch 
         * @param {string} ifMatch2 Expected scene version for optimistic locking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerRemoveItem: async (sceneId: string, itemId: string, ifMatch: string, ifMatch2: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('flatScenesControllerRemoveItem', 'sceneId', sceneId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('flatScenesControllerRemoveItem', 'itemId', itemId)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('flatScenesControllerRemoveItem', 'ifMatch', ifMatch)
            // verify required parameter 'ifMatch2' is not null or undefined
            assertParamExists('flatScenesControllerRemoveItem', 'ifMatch2', ifMatch2)
            const localVarPath = `/scenes/{sceneId}/items/{itemId}`
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (ifMatch != null) {
                localVarHeaderParameter['if-match'] = String(ifMatch);
            }
            if (ifMatch2 != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch2);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Flat route - no project ID required in path. Requires If-Match header for optimistic locking.
         * @summary Update scene properties
         * @param {string} sceneId Scene ID
         * @param {string} ifMatch 
         * @param {string} ifMatch2 Expected scene version for optimistic locking
         * @param {UpdateSceneDto} updateSceneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerUpdate: async (sceneId: string, ifMatch: string, ifMatch2: string, updateSceneDto: UpdateSceneDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('flatScenesControllerUpdate', 'sceneId', sceneId)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('flatScenesControllerUpdate', 'ifMatch', ifMatch)
            // verify required parameter 'ifMatch2' is not null or undefined
            assertParamExists('flatScenesControllerUpdate', 'ifMatch2', ifMatch2)
            // verify required parameter 'updateSceneDto' is not null or undefined
            assertParamExists('flatScenesControllerUpdate', 'updateSceneDto', updateSceneDto)
            const localVarPath = `/scenes/{sceneId}`
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (ifMatch != null) {
                localVarHeaderParameter['if-match'] = String(ifMatch);
            }
            if (ifMatch2 != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch2);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSceneDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Flat route - no project ID required in path. Requires If-Match header for optimistic locking.
         * @summary Update a scene item
         * @param {string} sceneId Scene ID
         * @param {string} itemId Scene item ID
         * @param {string} ifMatch 
         * @param {string} ifMatch2 Expected scene version for optimistic locking
         * @param {UpdateSceneItemDto} updateSceneItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerUpdateItem: async (sceneId: string, itemId: string, ifMatch: string, ifMatch2: string, updateSceneItemDto: UpdateSceneItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('flatScenesControllerUpdateItem', 'sceneId', sceneId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('flatScenesControllerUpdateItem', 'itemId', itemId)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('flatScenesControllerUpdateItem', 'ifMatch', ifMatch)
            // verify required parameter 'ifMatch2' is not null or undefined
            assertParamExists('flatScenesControllerUpdateItem', 'ifMatch2', ifMatch2)
            // verify required parameter 'updateSceneItemDto' is not null or undefined
            assertParamExists('flatScenesControllerUpdateItem', 'updateSceneItemDto', updateSceneItemDto)
            const localVarPath = `/scenes/{sceneId}/items/{itemId}`
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (ifMatch != null) {
                localVarHeaderParameter['if-match'] = String(ifMatch);
            }
            if (ifMatch2 != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch2);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSceneItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FlatScenesApi - functional programming interface
 * @export
 */
export const FlatScenesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FlatScenesApiAxiosParamCreator(configuration)
    return {
        /**
         * Flat route - no project ID required in path. Requires If-Match header for optimistic locking.
         * @summary Add an item to a scene
         * @param {string} sceneId Scene ID
         * @param {string} ifMatch 
         * @param {string} ifMatch2 Expected scene version for optimistic locking
         * @param {CreateSceneItemDto} createSceneItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flatScenesControllerAddItem(sceneId: string, ifMatch: string, ifMatch2: string, createSceneItemDto: CreateSceneItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flatScenesControllerAddItem(sceneId, ifMatch, ifMatch2, createSceneItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlatScenesApi.flatScenesControllerAddItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Flat route - no project ID required in path
         * @summary Get a specific scene with items
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flatScenesControllerFindOne(sceneId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flatScenesControllerFindOne(sceneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlatScenesApi.flatScenesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Flat route - returns operations needed to transform scene from one version to another
         * @summary Generate delta between scene versions
         * @param {string} sceneId Scene ID
         * @param {number} fromVersion Source version
         * @param {number} toVersion Target version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flatScenesControllerGenerateDelta(sceneId: string, fromVersion: number, toVersion: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SceneDelta>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flatScenesControllerGenerateDelta(sceneId, fromVersion, toVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlatScenesApi.flatScenesControllerGenerateDelta']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Flat route - returns a complete scene manifest with all items, transforms, and asset references. Supports category filtering.
         * @summary Generate scene manifest for client consumption
         * @param {string} sceneId Scene ID
         * @param {string} [categories] Comma-separated list of category keys to include in manifest. If not provided, all categories are included.
         * @param {boolean} [includeMetadata] Include additional category metadata like descriptions, tags, and configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flatScenesControllerGenerateManifest(sceneId: string, categories?: string, includeMetadata?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SceneManifestV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flatScenesControllerGenerateManifest(sceneId, categories, includeMetadata, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlatScenesApi.flatScenesControllerGenerateManifest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Flat route - returns all unique categories used by items in the scene with their metadata
         * @summary Get available categories in scene
         * @param {string} sceneId Scene ID
         * @param {string} [projectId] Filter by project ID
         * @param {string} [categoryKey] Filter by category key
         * @param {boolean} [instancing] Filter by instancing enabled
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flatScenesControllerGetSceneCategories(sceneId: string, projectId?: string, categoryKey?: string, instancing?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlatScenesControllerGetSceneCategories200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flatScenesControllerGetSceneCategories(sceneId, projectId, categoryKey, instancing, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlatScenesApi.flatScenesControllerGetSceneCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Flat route - returns the current version number for optimistic locking
         * @summary Get current scene version
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flatScenesControllerGetVersion(sceneId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flatScenesControllerGetVersion(sceneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlatScenesApi.flatScenesControllerGetVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Flat route - no project ID required in path
         * @summary Delete a scene and all its items
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flatScenesControllerRemove(sceneId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flatScenesControllerRemove(sceneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlatScenesApi.flatScenesControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Flat route - no project ID required in path. Requires If-Match header for optimistic locking.
         * @summary Remove an item from a scene
         * @param {string} sceneId Scene ID
         * @param {string} itemId Scene item ID
         * @param {string} ifMatch 
         * @param {string} ifMatch2 Expected scene version for optimistic locking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flatScenesControllerRemoveItem(sceneId: string, itemId: string, ifMatch: string, ifMatch2: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flatScenesControllerRemoveItem(sceneId, itemId, ifMatch, ifMatch2, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlatScenesApi.flatScenesControllerRemoveItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Flat route - no project ID required in path. Requires If-Match header for optimistic locking.
         * @summary Update scene properties
         * @param {string} sceneId Scene ID
         * @param {string} ifMatch 
         * @param {string} ifMatch2 Expected scene version for optimistic locking
         * @param {UpdateSceneDto} updateSceneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flatScenesControllerUpdate(sceneId: string, ifMatch: string, ifMatch2: string, updateSceneDto: UpdateSceneDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flatScenesControllerUpdate(sceneId, ifMatch, ifMatch2, updateSceneDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlatScenesApi.flatScenesControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Flat route - no project ID required in path. Requires If-Match header for optimistic locking.
         * @summary Update a scene item
         * @param {string} sceneId Scene ID
         * @param {string} itemId Scene item ID
         * @param {string} ifMatch 
         * @param {string} ifMatch2 Expected scene version for optimistic locking
         * @param {UpdateSceneItemDto} updateSceneItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flatScenesControllerUpdateItem(sceneId: string, itemId: string, ifMatch: string, ifMatch2: string, updateSceneItemDto: UpdateSceneItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flatScenesControllerUpdateItem(sceneId, itemId, ifMatch, ifMatch2, updateSceneItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlatScenesApi.flatScenesControllerUpdateItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FlatScenesApi - factory interface
 * @export
 */
export const FlatScenesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FlatScenesApiFp(configuration)
    return {
        /**
         * Flat route - no project ID required in path. Requires If-Match header for optimistic locking.
         * @summary Add an item to a scene
         * @param {string} sceneId Scene ID
         * @param {string} ifMatch 
         * @param {string} ifMatch2 Expected scene version for optimistic locking
         * @param {CreateSceneItemDto} createSceneItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerAddItem(sceneId: string, ifMatch: string, ifMatch2: string, createSceneItemDto: CreateSceneItemDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.flatScenesControllerAddItem(sceneId, ifMatch, ifMatch2, createSceneItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Flat route - no project ID required in path
         * @summary Get a specific scene with items
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerFindOne(sceneId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.flatScenesControllerFindOne(sceneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Flat route - returns operations needed to transform scene from one version to another
         * @summary Generate delta between scene versions
         * @param {string} sceneId Scene ID
         * @param {number} fromVersion Source version
         * @param {number} toVersion Target version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerGenerateDelta(sceneId: string, fromVersion: number, toVersion: number, options?: RawAxiosRequestConfig): AxiosPromise<SceneDelta> {
            return localVarFp.flatScenesControllerGenerateDelta(sceneId, fromVersion, toVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Flat route - returns a complete scene manifest with all items, transforms, and asset references. Supports category filtering.
         * @summary Generate scene manifest for client consumption
         * @param {string} sceneId Scene ID
         * @param {string} [categories] Comma-separated list of category keys to include in manifest. If not provided, all categories are included.
         * @param {boolean} [includeMetadata] Include additional category metadata like descriptions, tags, and configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerGenerateManifest(sceneId: string, categories?: string, includeMetadata?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SceneManifestV2> {
            return localVarFp.flatScenesControllerGenerateManifest(sceneId, categories, includeMetadata, options).then((request) => request(axios, basePath));
        },
        /**
         * Flat route - returns all unique categories used by items in the scene with their metadata
         * @summary Get available categories in scene
         * @param {string} sceneId Scene ID
         * @param {string} [projectId] Filter by project ID
         * @param {string} [categoryKey] Filter by category key
         * @param {boolean} [instancing] Filter by instancing enabled
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerGetSceneCategories(sceneId: string, projectId?: string, categoryKey?: string, instancing?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<FlatScenesControllerGetSceneCategories200Response> {
            return localVarFp.flatScenesControllerGetSceneCategories(sceneId, projectId, categoryKey, instancing, options).then((request) => request(axios, basePath));
        },
        /**
         * Flat route - returns the current version number for optimistic locking
         * @summary Get current scene version
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerGetVersion(sceneId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.flatScenesControllerGetVersion(sceneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Flat route - no project ID required in path
         * @summary Delete a scene and all its items
         * @param {string} sceneId Scene ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerRemove(sceneId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.flatScenesControllerRemove(sceneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Flat route - no project ID required in path. Requires If-Match header for optimistic locking.
         * @summary Remove an item from a scene
         * @param {string} sceneId Scene ID
         * @param {string} itemId Scene item ID
         * @param {string} ifMatch 
         * @param {string} ifMatch2 Expected scene version for optimistic locking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerRemoveItem(sceneId: string, itemId: string, ifMatch: string, ifMatch2: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.flatScenesControllerRemoveItem(sceneId, itemId, ifMatch, ifMatch2, options).then((request) => request(axios, basePath));
        },
        /**
         * Flat route - no project ID required in path. Requires If-Match header for optimistic locking.
         * @summary Update scene properties
         * @param {string} sceneId Scene ID
         * @param {string} ifMatch 
         * @param {string} ifMatch2 Expected scene version for optimistic locking
         * @param {UpdateSceneDto} updateSceneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerUpdate(sceneId: string, ifMatch: string, ifMatch2: string, updateSceneDto: UpdateSceneDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.flatScenesControllerUpdate(sceneId, ifMatch, ifMatch2, updateSceneDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Flat route - no project ID required in path. Requires If-Match header for optimistic locking.
         * @summary Update a scene item
         * @param {string} sceneId Scene ID
         * @param {string} itemId Scene item ID
         * @param {string} ifMatch 
         * @param {string} ifMatch2 Expected scene version for optimistic locking
         * @param {UpdateSceneItemDto} updateSceneItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatScenesControllerUpdateItem(sceneId: string, itemId: string, ifMatch: string, ifMatch2: string, updateSceneItemDto: UpdateSceneItemDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.flatScenesControllerUpdateItem(sceneId, itemId, ifMatch, ifMatch2, updateSceneItemDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FlatScenesApi - object-oriented interface
 * @export
 * @class FlatScenesApi
 * @extends {BaseAPI}
 */
export class FlatScenesApi extends BaseAPI {
    /**
     * Flat route - no project ID required in path. Requires If-Match header for optimistic locking.
     * @summary Add an item to a scene
     * @param {string} sceneId Scene ID
     * @param {string} ifMatch 
     * @param {string} ifMatch2 Expected scene version for optimistic locking
     * @param {CreateSceneItemDto} createSceneItemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlatScenesApi
     */
    public flatScenesControllerAddItem(sceneId: string, ifMatch: string, ifMatch2: string, createSceneItemDto: CreateSceneItemDto, options?: RawAxiosRequestConfig) {
        return FlatScenesApiFp(this.configuration).flatScenesControllerAddItem(sceneId, ifMatch, ifMatch2, createSceneItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Flat route - no project ID required in path
     * @summary Get a specific scene with items
     * @param {string} sceneId Scene ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlatScenesApi
     */
    public flatScenesControllerFindOne(sceneId: string, options?: RawAxiosRequestConfig) {
        return FlatScenesApiFp(this.configuration).flatScenesControllerFindOne(sceneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Flat route - returns operations needed to transform scene from one version to another
     * @summary Generate delta between scene versions
     * @param {string} sceneId Scene ID
     * @param {number} fromVersion Source version
     * @param {number} toVersion Target version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlatScenesApi
     */
    public flatScenesControllerGenerateDelta(sceneId: string, fromVersion: number, toVersion: number, options?: RawAxiosRequestConfig) {
        return FlatScenesApiFp(this.configuration).flatScenesControllerGenerateDelta(sceneId, fromVersion, toVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Flat route - returns a complete scene manifest with all items, transforms, and asset references. Supports category filtering.
     * @summary Generate scene manifest for client consumption
     * @param {string} sceneId Scene ID
     * @param {string} [categories] Comma-separated list of category keys to include in manifest. If not provided, all categories are included.
     * @param {boolean} [includeMetadata] Include additional category metadata like descriptions, tags, and configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlatScenesApi
     */
    public flatScenesControllerGenerateManifest(sceneId: string, categories?: string, includeMetadata?: boolean, options?: RawAxiosRequestConfig) {
        return FlatScenesApiFp(this.configuration).flatScenesControllerGenerateManifest(sceneId, categories, includeMetadata, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Flat route - returns all unique categories used by items in the scene with their metadata
     * @summary Get available categories in scene
     * @param {string} sceneId Scene ID
     * @param {string} [projectId] Filter by project ID
     * @param {string} [categoryKey] Filter by category key
     * @param {boolean} [instancing] Filter by instancing enabled
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlatScenesApi
     */
    public flatScenesControllerGetSceneCategories(sceneId: string, projectId?: string, categoryKey?: string, instancing?: boolean, options?: RawAxiosRequestConfig) {
        return FlatScenesApiFp(this.configuration).flatScenesControllerGetSceneCategories(sceneId, projectId, categoryKey, instancing, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Flat route - returns the current version number for optimistic locking
     * @summary Get current scene version
     * @param {string} sceneId Scene ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlatScenesApi
     */
    public flatScenesControllerGetVersion(sceneId: string, options?: RawAxiosRequestConfig) {
        return FlatScenesApiFp(this.configuration).flatScenesControllerGetVersion(sceneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Flat route - no project ID required in path
     * @summary Delete a scene and all its items
     * @param {string} sceneId Scene ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlatScenesApi
     */
    public flatScenesControllerRemove(sceneId: string, options?: RawAxiosRequestConfig) {
        return FlatScenesApiFp(this.configuration).flatScenesControllerRemove(sceneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Flat route - no project ID required in path. Requires If-Match header for optimistic locking.
     * @summary Remove an item from a scene
     * @param {string} sceneId Scene ID
     * @param {string} itemId Scene item ID
     * @param {string} ifMatch 
     * @param {string} ifMatch2 Expected scene version for optimistic locking
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlatScenesApi
     */
    public flatScenesControllerRemoveItem(sceneId: string, itemId: string, ifMatch: string, ifMatch2: string, options?: RawAxiosRequestConfig) {
        return FlatScenesApiFp(this.configuration).flatScenesControllerRemoveItem(sceneId, itemId, ifMatch, ifMatch2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Flat route - no project ID required in path. Requires If-Match header for optimistic locking.
     * @summary Update scene properties
     * @param {string} sceneId Scene ID
     * @param {string} ifMatch 
     * @param {string} ifMatch2 Expected scene version for optimistic locking
     * @param {UpdateSceneDto} updateSceneDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlatScenesApi
     */
    public flatScenesControllerUpdate(sceneId: string, ifMatch: string, ifMatch2: string, updateSceneDto: UpdateSceneDto, options?: RawAxiosRequestConfig) {
        return FlatScenesApiFp(this.configuration).flatScenesControllerUpdate(sceneId, ifMatch, ifMatch2, updateSceneDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Flat route - no project ID required in path. Requires If-Match header for optimistic locking.
     * @summary Update a scene item
     * @param {string} sceneId Scene ID
     * @param {string} itemId Scene item ID
     * @param {string} ifMatch 
     * @param {string} ifMatch2 Expected scene version for optimistic locking
     * @param {UpdateSceneItemDto} updateSceneItemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlatScenesApi
     */
    public flatScenesControllerUpdateItem(sceneId: string, itemId: string, ifMatch: string, ifMatch2: string, updateSceneItemDto: UpdateSceneItemDto, options?: RawAxiosRequestConfig) {
        return FlatScenesApiFp(this.configuration).flatScenesControllerUpdateItem(sceneId, itemId, ifMatch, ifMatch2, updateSceneItemDto, options).then((request) => request(this.axios, this.basePath));
    }
}

