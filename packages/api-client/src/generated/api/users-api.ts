/* tslint:disable */
/* eslint-disable */
/**
 * Lumea API
 * # Lumea Interior Layout Generator API  Advanced AI-powered interior layout generator with explainable spatial reasoning.  ## Features - **3D Scene Management**: Create and manage complex 3D interior layouts - **Asset Processing Pipeline**: Automatic optimization with KTX2, Draco, and Meshopt variants - **Real-time Collaboration**: Server-Sent Events for live scene updates - **Optimistic Locking**: If-Match headers for safe concurrent editing - **Category-based Organization**: Enhanced scene manifests with filtering capabilities - **Processing Queue**: Background asset processing with status tracking  ## Authentication All endpoints require Bearer token authentication unless explicitly marked as public.  ## Rate Limiting - General API: 100 requests per 15 minutes per IP - Authentication: 5 attempts per 15 minutes per IP  ## Versioning Scene operations support optimistic locking via If-Match headers for safe concurrent editing.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lumea.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AuthControllerRegisterRequest } from '../models';
// @ts-ignore
import type { UsersControllerChangePasswordRequest } from '../models';
// @ts-ignore
import type { UsersControllerUpdateCurrentUserRequest } from '../models';
// @ts-ignore
import type { UsersControllerUpdateUserRequest } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change current user password
         * @param {UsersControllerChangePasswordRequest} usersControllerChangePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerChangePassword: async (usersControllerChangePasswordRequest: UsersControllerChangePasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersControllerChangePasswordRequest' is not null or undefined
            assertParamExists('usersControllerChangePassword', 'usersControllerChangePasswordRequest', usersControllerChangePasswordRequest)
            const localVarPath = `/users/me/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersControllerChangePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new user (Admin only)
         * @param {AuthControllerRegisterRequest} authControllerRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreateUser: async (authControllerRegisterRequest: AuthControllerRegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authControllerRegisterRequest' is not null or undefined
            assertParamExists('usersControllerCreateUser', 'authControllerRegisterRequest', authControllerRegisterRequest)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authControllerRegisterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete user by ID (Admin only)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDeleteUser: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerDeleteUser', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetCurrentUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user by ID (Admin only or own profile)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerGetUserById', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user statistics (Admin only)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserStats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all users with pagination and filtering (Admin only)
         * @param {number} [page] Page number (default: 1)
         * @param {number} [limit] Items per page (default: 10)
         * @param {string} [search] Search by name or email
         * @param {boolean} [isActive] Filter by active status
         * @param {UsersControllerGetUsersRoleEnum} [role] Filter by role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUsers: async (page?: number, limit?: number, search?: string, isActive?: boolean, role?: UsersControllerGetUsersRoleEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['isActive'] = isActive;
            }

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update current user profile
         * @param {UsersControllerUpdateCurrentUserRequest} usersControllerUpdateCurrentUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateCurrentUser: async (usersControllerUpdateCurrentUserRequest: UsersControllerUpdateCurrentUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersControllerUpdateCurrentUserRequest' is not null or undefined
            assertParamExists('usersControllerUpdateCurrentUser', 'usersControllerUpdateCurrentUserRequest', usersControllerUpdateCurrentUserRequest)
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersControllerUpdateCurrentUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user by ID (Admin only)
         * @param {string} id 
         * @param {UsersControllerUpdateUserRequest} usersControllerUpdateUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateUser: async (id: string, usersControllerUpdateUserRequest: UsersControllerUpdateUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerUpdateUser', 'id', id)
            // verify required parameter 'usersControllerUpdateUserRequest' is not null or undefined
            assertParamExists('usersControllerUpdateUser', 'usersControllerUpdateUserRequest', usersControllerUpdateUserRequest)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersControllerUpdateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Change current user password
         * @param {UsersControllerChangePasswordRequest} usersControllerChangePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerChangePassword(usersControllerChangePasswordRequest: UsersControllerChangePasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerChangePassword(usersControllerChangePasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerChangePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new user (Admin only)
         * @param {AuthControllerRegisterRequest} authControllerRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerCreateUser(authControllerRegisterRequest: AuthControllerRegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerCreateUser(authControllerRegisterRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerCreateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete user by ID (Admin only)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerDeleteUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerDeleteUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerDeleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get current user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetCurrentUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetCurrentUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerGetCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get user by ID (Admin only or own profile)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetUserById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetUserById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerGetUserById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get user statistics (Admin only)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetUserStats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetUserStats(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerGetUserStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all users with pagination and filtering (Admin only)
         * @param {number} [page] Page number (default: 1)
         * @param {number} [limit] Items per page (default: 10)
         * @param {string} [search] Search by name or email
         * @param {boolean} [isActive] Filter by active status
         * @param {UsersControllerGetUsersRoleEnum} [role] Filter by role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetUsers(page?: number, limit?: number, search?: string, isActive?: boolean, role?: UsersControllerGetUsersRoleEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetUsers(page, limit, search, isActive, role, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerGetUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update current user profile
         * @param {UsersControllerUpdateCurrentUserRequest} usersControllerUpdateCurrentUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUpdateCurrentUser(usersControllerUpdateCurrentUserRequest: UsersControllerUpdateCurrentUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdateCurrentUser(usersControllerUpdateCurrentUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerUpdateCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update user by ID (Admin only)
         * @param {string} id 
         * @param {UsersControllerUpdateUserRequest} usersControllerUpdateUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUpdateUser(id: string, usersControllerUpdateUserRequest: UsersControllerUpdateUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdateUser(id, usersControllerUpdateUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerUpdateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Change current user password
         * @param {UsersControllerChangePasswordRequest} usersControllerChangePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerChangePassword(usersControllerChangePasswordRequest: UsersControllerChangePasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerChangePassword(usersControllerChangePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new user (Admin only)
         * @param {AuthControllerRegisterRequest} authControllerRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreateUser(authControllerRegisterRequest: AuthControllerRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.usersControllerCreateUser(authControllerRegisterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete user by ID (Admin only)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDeleteUser(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerDeleteUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.usersControllerGetCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user by ID (Admin only or own profile)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.usersControllerGetUserById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user statistics (Admin only)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserStats(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.usersControllerGetUserStats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all users with pagination and filtering (Admin only)
         * @param {number} [page] Page number (default: 1)
         * @param {number} [limit] Items per page (default: 10)
         * @param {string} [search] Search by name or email
         * @param {boolean} [isActive] Filter by active status
         * @param {UsersControllerGetUsersRoleEnum} [role] Filter by role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUsers(page?: number, limit?: number, search?: string, isActive?: boolean, role?: UsersControllerGetUsersRoleEnum, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.usersControllerGetUsers(page, limit, search, isActive, role, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update current user profile
         * @param {UsersControllerUpdateCurrentUserRequest} usersControllerUpdateCurrentUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateCurrentUser(usersControllerUpdateCurrentUserRequest: UsersControllerUpdateCurrentUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.usersControllerUpdateCurrentUser(usersControllerUpdateCurrentUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user by ID (Admin only)
         * @param {string} id 
         * @param {UsersControllerUpdateUserRequest} usersControllerUpdateUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateUser(id: string, usersControllerUpdateUserRequest: UsersControllerUpdateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.usersControllerUpdateUser(id, usersControllerUpdateUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Change current user password
     * @param {UsersControllerChangePasswordRequest} usersControllerChangePasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerChangePassword(usersControllerChangePasswordRequest: UsersControllerChangePasswordRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerChangePassword(usersControllerChangePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new user (Admin only)
     * @param {AuthControllerRegisterRequest} authControllerRegisterRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerCreateUser(authControllerRegisterRequest: AuthControllerRegisterRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerCreateUser(authControllerRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete user by ID (Admin only)
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerDeleteUser(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerDeleteUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetCurrentUser(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerGetCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user by ID (Admin only or own profile)
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetUserById(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerGetUserById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user statistics (Admin only)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetUserStats(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerGetUserStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all users with pagination and filtering (Admin only)
     * @param {number} [page] Page number (default: 1)
     * @param {number} [limit] Items per page (default: 10)
     * @param {string} [search] Search by name or email
     * @param {boolean} [isActive] Filter by active status
     * @param {UsersControllerGetUsersRoleEnum} [role] Filter by role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetUsers(page?: number, limit?: number, search?: string, isActive?: boolean, role?: UsersControllerGetUsersRoleEnum, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerGetUsers(page, limit, search, isActive, role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update current user profile
     * @param {UsersControllerUpdateCurrentUserRequest} usersControllerUpdateCurrentUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerUpdateCurrentUser(usersControllerUpdateCurrentUserRequest: UsersControllerUpdateCurrentUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerUpdateCurrentUser(usersControllerUpdateCurrentUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user by ID (Admin only)
     * @param {string} id 
     * @param {UsersControllerUpdateUserRequest} usersControllerUpdateUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerUpdateUser(id: string, usersControllerUpdateUserRequest: UsersControllerUpdateUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerUpdateUser(id, usersControllerUpdateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const UsersControllerGetUsersRoleEnum = {
    Guest: 'GUEST',
    Client: 'CLIENT',
    Designer: 'DESIGNER',
    Admin: 'ADMIN'
} as const;
export type UsersControllerGetUsersRoleEnum = typeof UsersControllerGetUsersRoleEnum[keyof typeof UsersControllerGetUsersRoleEnum];
