/* tslint:disable */
/* eslint-disable */
/**
 * Lumea API
 * # Lumea Interior Layout Generator API  Advanced AI-powered interior layout generator with explainable spatial reasoning.  ## Features - **3D Scene Management**: Create and manage complex 3D interior layouts - **Asset Processing Pipeline**: Automatic optimization with KTX2, Draco, and Meshopt variants - **Real-time Collaboration**: Server-Sent Events for live scene updates - **Optimistic Locking**: If-Match headers for safe concurrent editing - **Category-based Organization**: Enhanced scene manifests with filtering capabilities - **Processing Queue**: Background asset processing with status tracking  ## Authentication All endpoints require Bearer token authentication unless explicitly marked as public.  ## Rate Limiting - General API: 100 requests per 15 minutes per IP - Authentication: 5 attempts per 15 minutes per IP  ## Versioning Scene operations support optimistic locking via If-Match headers for safe concurrent editing.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lumea.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateProjectCategory3DDto } from '../models';
// @ts-ignore
import type { UpdateProjectCategory3DDto } from '../models';
/**
 * ProjectCategories3DApi - axios parameter creator
 * @export
 */
export const ProjectCategories3DApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add multiple categories to a project
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectCategory3DControllerBulkCreate: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectCategory3DControllerBulkCreate', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/categories/bulk`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add an asset category to a project
         * @param {string} projectId Project ID
         * @param {CreateProjectCategory3DDto} createProjectCategory3DDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectCategory3DControllerCreate: async (projectId: string, createProjectCategory3DDto: CreateProjectCategory3DDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectCategory3DControllerCreate', 'projectId', projectId)
            // verify required parameter 'createProjectCategory3DDto' is not null or undefined
            assertParamExists('projectCategory3DControllerCreate', 'createProjectCategory3DDto', createProjectCategory3DDto)
            const localVarPath = `/projects/{projectId}/categories`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectCategory3DDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all asset categories in a project
         * @param {string} projectId Project ID
         * @param {string} [categoryKey] Filter by category key
         * @param {boolean} [instancing] Filter by instancing enabled
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectCategory3DControllerFindAll: async (projectId: string, categoryKey?: string, instancing?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectCategory3DControllerFindAll', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/categories`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categoryKey !== undefined) {
                localVarQueryParameter['categoryKey'] = categoryKey;
            }

            if (instancing !== undefined) {
                localVarQueryParameter['instancing'] = instancing;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific category in a project
         * @param {string} projectId Project ID
         * @param {string} categoryKey Category key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectCategory3DControllerFindOne: async (projectId: string, categoryKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectCategory3DControllerFindOne', 'projectId', projectId)
            // verify required parameter 'categoryKey' is not null or undefined
            assertParamExists('projectCategory3DControllerFindOne', 'categoryKey', categoryKey)
            const localVarPath = `/projects/{projectId}/categories/{categoryKey}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"categoryKey"}}`, encodeURIComponent(String(categoryKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get assets available for adding to project
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectCategory3DControllerGetAvailableAssets: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectCategory3DControllerGetAvailableAssets', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/categories/available-assets`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get usage statistics for a category
         * @param {string} projectId Project ID
         * @param {string} categoryKey Category key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectCategory3DControllerGetStats: async (projectId: string, categoryKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectCategory3DControllerGetStats', 'projectId', projectId)
            // verify required parameter 'categoryKey' is not null or undefined
            assertParamExists('projectCategory3DControllerGetStats', 'categoryKey', categoryKey)
            const localVarPath = `/projects/{projectId}/categories/{categoryKey}/stats`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"categoryKey"}}`, encodeURIComponent(String(categoryKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a category from a project
         * @param {string} projectId Project ID
         * @param {string} categoryKey Category key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectCategory3DControllerRemove: async (projectId: string, categoryKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectCategory3DControllerRemove', 'projectId', projectId)
            // verify required parameter 'categoryKey' is not null or undefined
            assertParamExists('projectCategory3DControllerRemove', 'categoryKey', categoryKey)
            const localVarPath = `/projects/{projectId}/categories/{categoryKey}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"categoryKey"}}`, encodeURIComponent(String(categoryKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update category configuration
         * @param {string} projectId Project ID
         * @param {string} categoryKey Category key
         * @param {UpdateProjectCategory3DDto} updateProjectCategory3DDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectCategory3DControllerUpdate: async (projectId: string, categoryKey: string, updateProjectCategory3DDto: UpdateProjectCategory3DDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectCategory3DControllerUpdate', 'projectId', projectId)
            // verify required parameter 'categoryKey' is not null or undefined
            assertParamExists('projectCategory3DControllerUpdate', 'categoryKey', categoryKey)
            // verify required parameter 'updateProjectCategory3DDto' is not null or undefined
            assertParamExists('projectCategory3DControllerUpdate', 'updateProjectCategory3DDto', updateProjectCategory3DDto)
            const localVarPath = `/projects/{projectId}/categories/{categoryKey}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"categoryKey"}}`, encodeURIComponent(String(categoryKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectCategory3DDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectCategories3DApi - functional programming interface
 * @export
 */
export const ProjectCategories3DApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectCategories3DApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add multiple categories to a project
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectCategory3DControllerBulkCreate(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectCategory3DControllerBulkCreate(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectCategories3DApi.projectCategory3DControllerBulkCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add an asset category to a project
         * @param {string} projectId Project ID
         * @param {CreateProjectCategory3DDto} createProjectCategory3DDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectCategory3DControllerCreate(projectId: string, createProjectCategory3DDto: CreateProjectCategory3DDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectCategory3DControllerCreate(projectId, createProjectCategory3DDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectCategories3DApi.projectCategory3DControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all asset categories in a project
         * @param {string} projectId Project ID
         * @param {string} [categoryKey] Filter by category key
         * @param {boolean} [instancing] Filter by instancing enabled
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectCategory3DControllerFindAll(projectId: string, categoryKey?: string, instancing?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectCategory3DControllerFindAll(projectId, categoryKey, instancing, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectCategories3DApi.projectCategory3DControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a specific category in a project
         * @param {string} projectId Project ID
         * @param {string} categoryKey Category key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectCategory3DControllerFindOne(projectId: string, categoryKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectCategory3DControllerFindOne(projectId, categoryKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectCategories3DApi.projectCategory3DControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get assets available for adding to project
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectCategory3DControllerGetAvailableAssets(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectCategory3DControllerGetAvailableAssets(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectCategories3DApi.projectCategory3DControllerGetAvailableAssets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get usage statistics for a category
         * @param {string} projectId Project ID
         * @param {string} categoryKey Category key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectCategory3DControllerGetStats(projectId: string, categoryKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectCategory3DControllerGetStats(projectId, categoryKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectCategories3DApi.projectCategory3DControllerGetStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove a category from a project
         * @param {string} projectId Project ID
         * @param {string} categoryKey Category key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectCategory3DControllerRemove(projectId: string, categoryKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectCategory3DControllerRemove(projectId, categoryKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectCategories3DApi.projectCategory3DControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update category configuration
         * @param {string} projectId Project ID
         * @param {string} categoryKey Category key
         * @param {UpdateProjectCategory3DDto} updateProjectCategory3DDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectCategory3DControllerUpdate(projectId: string, categoryKey: string, updateProjectCategory3DDto: UpdateProjectCategory3DDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectCategory3DControllerUpdate(projectId, categoryKey, updateProjectCategory3DDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectCategories3DApi.projectCategory3DControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectCategories3DApi - factory interface
 * @export
 */
export const ProjectCategories3DApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectCategories3DApiFp(configuration)
    return {
        /**
         * 
         * @summary Add multiple categories to a project
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectCategory3DControllerBulkCreate(projectId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectCategory3DControllerBulkCreate(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add an asset category to a project
         * @param {string} projectId Project ID
         * @param {CreateProjectCategory3DDto} createProjectCategory3DDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectCategory3DControllerCreate(projectId: string, createProjectCategory3DDto: CreateProjectCategory3DDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectCategory3DControllerCreate(projectId, createProjectCategory3DDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all asset categories in a project
         * @param {string} projectId Project ID
         * @param {string} [categoryKey] Filter by category key
         * @param {boolean} [instancing] Filter by instancing enabled
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectCategory3DControllerFindAll(projectId: string, categoryKey?: string, instancing?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectCategory3DControllerFindAll(projectId, categoryKey, instancing, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific category in a project
         * @param {string} projectId Project ID
         * @param {string} categoryKey Category key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectCategory3DControllerFindOne(projectId: string, categoryKey: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectCategory3DControllerFindOne(projectId, categoryKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get assets available for adding to project
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectCategory3DControllerGetAvailableAssets(projectId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectCategory3DControllerGetAvailableAssets(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get usage statistics for a category
         * @param {string} projectId Project ID
         * @param {string} categoryKey Category key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectCategory3DControllerGetStats(projectId: string, categoryKey: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectCategory3DControllerGetStats(projectId, categoryKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a category from a project
         * @param {string} projectId Project ID
         * @param {string} categoryKey Category key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectCategory3DControllerRemove(projectId: string, categoryKey: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectCategory3DControllerRemove(projectId, categoryKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update category configuration
         * @param {string} projectId Project ID
         * @param {string} categoryKey Category key
         * @param {UpdateProjectCategory3DDto} updateProjectCategory3DDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectCategory3DControllerUpdate(projectId: string, categoryKey: string, updateProjectCategory3DDto: UpdateProjectCategory3DDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectCategory3DControllerUpdate(projectId, categoryKey, updateProjectCategory3DDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectCategories3DApi - object-oriented interface
 * @export
 * @class ProjectCategories3DApi
 * @extends {BaseAPI}
 */
export class ProjectCategories3DApi extends BaseAPI {
    /**
     * 
     * @summary Add multiple categories to a project
     * @param {string} projectId Project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectCategories3DApi
     */
    public projectCategory3DControllerBulkCreate(projectId: string, options?: RawAxiosRequestConfig) {
        return ProjectCategories3DApiFp(this.configuration).projectCategory3DControllerBulkCreate(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add an asset category to a project
     * @param {string} projectId Project ID
     * @param {CreateProjectCategory3DDto} createProjectCategory3DDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectCategories3DApi
     */
    public projectCategory3DControllerCreate(projectId: string, createProjectCategory3DDto: CreateProjectCategory3DDto, options?: RawAxiosRequestConfig) {
        return ProjectCategories3DApiFp(this.configuration).projectCategory3DControllerCreate(projectId, createProjectCategory3DDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all asset categories in a project
     * @param {string} projectId Project ID
     * @param {string} [categoryKey] Filter by category key
     * @param {boolean} [instancing] Filter by instancing enabled
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectCategories3DApi
     */
    public projectCategory3DControllerFindAll(projectId: string, categoryKey?: string, instancing?: boolean, options?: RawAxiosRequestConfig) {
        return ProjectCategories3DApiFp(this.configuration).projectCategory3DControllerFindAll(projectId, categoryKey, instancing, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific category in a project
     * @param {string} projectId Project ID
     * @param {string} categoryKey Category key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectCategories3DApi
     */
    public projectCategory3DControllerFindOne(projectId: string, categoryKey: string, options?: RawAxiosRequestConfig) {
        return ProjectCategories3DApiFp(this.configuration).projectCategory3DControllerFindOne(projectId, categoryKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get assets available for adding to project
     * @param {string} projectId Project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectCategories3DApi
     */
    public projectCategory3DControllerGetAvailableAssets(projectId: string, options?: RawAxiosRequestConfig) {
        return ProjectCategories3DApiFp(this.configuration).projectCategory3DControllerGetAvailableAssets(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get usage statistics for a category
     * @param {string} projectId Project ID
     * @param {string} categoryKey Category key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectCategories3DApi
     */
    public projectCategory3DControllerGetStats(projectId: string, categoryKey: string, options?: RawAxiosRequestConfig) {
        return ProjectCategories3DApiFp(this.configuration).projectCategory3DControllerGetStats(projectId, categoryKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a category from a project
     * @param {string} projectId Project ID
     * @param {string} categoryKey Category key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectCategories3DApi
     */
    public projectCategory3DControllerRemove(projectId: string, categoryKey: string, options?: RawAxiosRequestConfig) {
        return ProjectCategories3DApiFp(this.configuration).projectCategory3DControllerRemove(projectId, categoryKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update category configuration
     * @param {string} projectId Project ID
     * @param {string} categoryKey Category key
     * @param {UpdateProjectCategory3DDto} updateProjectCategory3DDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectCategories3DApi
     */
    public projectCategory3DControllerUpdate(projectId: string, categoryKey: string, updateProjectCategory3DDto: UpdateProjectCategory3DDto, options?: RawAxiosRequestConfig) {
        return ProjectCategories3DApiFp(this.configuration).projectCategory3DControllerUpdate(projectId, categoryKey, updateProjectCategory3DDto, options).then((request) => request(this.axios, this.basePath));
    }
}

