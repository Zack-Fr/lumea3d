name: API tests

on:
  push:
    branches: [ dev, main ]
  pull_request:
    branches: [ dev, main ]
  workflow_dispatch: {}

jobs:
  test-api:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: lumea_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d lumea_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://${{ secrets.PG_USER || 'postgres' }}:${{ secrets.PG_PASSWORD || 'postgres' }}@localhost:5432/lumea_test
      NODE_ENV: test
      JWT_SECRET: test-jwt-secret-for-ci-environment-only
      JWT_REFRESH_SECRET: test-refresh-secret-for-ci-environment-only
      JWT_EXPIRES_IN: 15m
      GOOGLE_CLIENT_ID: test-google-client-id
      GOOGLE_CLIENT_SECRET: test-google-client-secret

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '10'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared packages
        run: pnpm --filter @lumea/shared build

      - name: Validate database connection
        run: |
          echo "Testing database connection..."
          timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do 
            echo "Waiting for PostgreSQL..."; 
            sleep 2; 
          done'
          echo "Database connection established!"
        env:
          PGPASSWORD: postgres

      - name: Generate Prisma client
        run: pnpm --filter @lumea/api run prisma:generate

      - name: Run migrations (deploy)
        run: pnpm --filter @lumea/api run prisma:deploy

      - name: Run API tests
        run: pnpm --filter @lumea/api test

      - name: Generate OpenAPI JSON
        run: node scripts/generate-openapi.mjs

      - name: Upload OpenAPI artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi-json
          path: openapi.json
